# Generated by Django 2.0.8 on 2019-11-22 20:06

from django.db import migrations, models
import django.db.models.deletion


def move_relation(apps, schema_editor):
    """
    Custom migration operation.
    For each order, reads the value of period (old relation)
    and sets temp_name_1 (new relation) to match.
    """
    Order = apps.get_model('kiltshop', 'Order')
    for order in Order.objects.all():
        order.temp_name_1 = order.period.first()
        order.save()


class Migration(migrations.Migration):
    """
    This migrations is one of the most advanced migrations in the entire project.
    In short, it changes so that the ManyToManyField OrderPeriod.orders
    becomes a ForeignKey, Order.period.

    To do this, we create the new relation, move the old values to it, and delete the old relation.
    In order to get the names to match up without conflict during the migration,
    we initially name the new relation 'temp_name_1', and then rename it later.
    Also, we have to create it with blank=True and null=True, and then change it later in the migration.
    """

    dependencies = [
        ('kiltshop', '0003_rename_orderinfo'),
    ]

    operations = [
        # add new field called temp_name_1, a ForeignKey from Order to OrderPeriod
        migrations.AddField(
            model_name='order',
            name='temp_name_1',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='temp_name_2',
                to='kiltshop.OrderPeriod'
            ),
        ),
        # set the value of temp_name_1 to match period (related_name of OrderPeriod.orders)
        migrations.RunPython(move_relation),
        # remove the old relation
        migrations.RemoveField(
            model_name='OrderPeriod',
            name='orders'
        ),
        # rename temp_name_1 to period
        migrations.RenameField(
            model_name='Order',
            old_name='temp_name_1',
            new_name='period'
        ),
        # fix the field, including blank, null and related_name
        migrations.AlterField(
            model_name='Order',
            name='period',
            field=models.ForeignKey(
                related_name='orders',
                blank=False,
                null=False,
                on_delete=models.CASCADE,
                to='kiltshop.OrderPeriod'
            )
        )
    ]
